@charset "utf-8";

/*
    mixin
    参照元：https://coliss.com/articles/build-websites/operation/css/15-essential-sass-mixins-by-developerdrive.html
*/

// box-sizing（ボックスサイズ）
@mixin box-sizing($type)
{
	-webkit-box-sizing:$type;
	-moz-box-sizing:$type;
	box-sizing:$type;
}

// opacity（不透明度）
@mixin opacity($opacity) {
	opacity: $opacity;
	filter: alpha(opacity=($opacity * 100));
}

// column-width（カラム幅）
@mixin column-width ( $value: 150px ) {
	-webkit-column-width: $value;
	-moz-column-width: $value;
	column-width: $value;
}

// circle（円形）
@mixin circle
{
	@include border-radius(100%);
}

// font-size（フォントサイズ）
@mixin fz($size: $baseFontSize, $important: "") {
    $imp: "";

    @if $important == "i" {
        $imp: " !important";
    }

    font-size: $size + px + $imp;
    font-size: $size / nounit($baseFontSize) + rem + $imp;
}

// box-shadow（ボックスシャドウ）
@mixin box-shadow( $h: 10px , $v: 10px , $b: 0px , $s: 0px , $c: #000000 ) {
	-webkit-box-shadow: $h $v $b $s $c;
	-moz-box-shadow: $h $v $b $s $c;
	box-shadow: $h $v $b $s $c;
}

 // xPos（要素の座標）
 @mixin xPos($x) {
 	-webkit-transform:translateX($x);
 	-moz-transform:translateX($x);
 	-ms-transform:translateX($x);
 	transform:translateX($x);
 }

// vertical-align（天地の中央に配置）
@mixin vertical-align {
	position: relative;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}

 // flexbox（フレックスボックス）
 @mixin flexbox
 {
 display:-webkit-box; // old
 display:-moz-box; // old
 display:-ms-flexbox; // ie
 display:-webkit-flex; // new
 display:flex; // new
}

// flex（モダンブラウザの旧仕様にも対応したflexの指定）
@mixin flex($values) {
	-webkit-box-flex: $values;
	-moz-box-flex:  $values;
	-ms-flex:  $values;
	-webkit-flex:  $values;
	flex:  $values;
}

 // flex-order（表示の順番）
 @mixin flex-order($order){
     -webkit-box-ordinal-group: $order; // old
 -moz-box-ordinal-group: $order; // old
 -ms-flex-order: $order; // ie
 -webkit-order: $order; // new
 order: $order; // new
}

// flex-direction（表示の方向）
@mixin flex-direction($direction)
{
	@if $direction == column
	{
		-webkit-flex-direction:vertical;
		-moz-flex-direction:vertical;
		-ms-flex-direction:column;
		-webkit-flex-direction:column;
		flex-direction:column;
	}
	@else
	{
		-webkit-flex-direction:horizontal;
		-moz-flex-direction:horizontal;
		-ms-flex-direction:row;
		-webkit-flex-direction:row;
		flex-direction:row;
	}
}

 // gradient（グラデーション）
 @mixin gradient($start-color, $end-color, $orientation)
 {
 	background: $start-color;
 	@if $orientation == vertical
 	{
 // vertical
 background: -moz-linear-gradient(top,  $start-color 0%, $end-color 100%);
 background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color));
 background: -webkit-linear-gradient(top,  $start-color 0%,$end-color 100%);
 background: -o-linear-gradient(top,  $start-color 0%,$end-color 100%);
 background: -ms-linear-gradient(top,  $start-color 0%,$end-color 100%);
 background: linear-gradient(to bottom,  $start-color 0%,$end-color 100%);
 filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );
}
@else if $orientation == horizontal
{
 // horizontal
 background: -moz-linear-gradient(left,  $start-color 0%, $end-color 100%);
 background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color));
 background: -webkit-linear-gradient(left,  $start-color 0%,$end-color 100%);
 background: -o-linear-gradient(left,  $start-color 0%,$end-color 100%);
 background: -ms-linear-gradient(left,  $start-color 0%,$end-color 100%);
 background: linear-gradient(to right,  $start-color 0%,$end-color 100%);
 filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
}
@else
{
 // radial
 background: -moz-radial-gradient(center, ellipse cover,  $start-color 0%, $end-color 100%);
 background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color));
 background: -webkit-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
 background: -o-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
 background: -ms-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
 background: radial-gradient(ellipse at center,  $start-color 0%,$end-color 100%);
 filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
}
}

 // ghost-button（ゴーストボタン）
 @mixin ghost-button($font, $font-size, $font-color, $border-size, $border-color, $padding, $transition-speed, $hover-color)
 {
 	display:inline-block;
 	text-decoration:none;
 	text-transform:uppercase;
 	font-family: $font;
 	font-size: $font-size;
 	color:$font-color;
 	border:$border-size solid $border-color;
 	padding:$padding;
 	-webkit-transition: color $transition-speed, background $transition-speed;
 	transition: color $transition-speed, background $transition-speed;
 	&:hover
 	{
 		background:$border-color;
 		color:$hover-color;
 	}
 }

/* clearfix */
@mixin clearfix() {
    &:after {
        display:block;
        clear:both;
        content:".";
        height:0;
        visibility:hidden;
    }
}
.clearfix {
    &:after {
        display:block;
        clear:both;
        content:".";
        height:0;
        visibility:hidden;
    }
}
%clearfix {
    &:after {
        display:block;
        clear:both;
        content:".";
        height:0;
        visibility:hidden;
    }
}

/* margin */
@function mgn($adjust: 0, $direction: $baseMgn) {
    @return $direction + (8 * $adjust);
}

/* mediaquery */
$mqPcWidthVal: $spMaxWidth + 1px;
// @if $mqTabletFlg == true {
//     $mqPcWidthVal: $contMinWidth + 1px;
// }
@mixin mqPc($mqPcWidth1: $mqPcWidthVal) {
    $mqWidth1: $mqPcWidth1;

    @media (min-width: #{$mqWidth1}) {
        @content;
    }
}
@mixin mqTb($mqTbWidth1: $spMaxWidth + 1px, $mqTbWidth2: $contMinWidth) {
    $mqWidth1: $mqTbWidth1;
    $mqWidth2: $mqTbWidth2;

    @media (min-width: #{$mqWidth1}) and (max-width: #{$mqWidth2}) {
        @content;
    }
}
@mixin mqSp($mqSpWidth1: $spMaxWidth) {
    $mqWidth1: $mqSpWidth1;

    @media (max-width: #{$mqWidth1}) {
        @content;
    }
}

/* invisibilityElem */
@mixin setElem($elemPos: before, $elemCont: "") {
    position: relative;

    &:#{$elemPos} {
        display: block;
        position: absolute;
        content: $elemCont;
    }
}

/* 中央寄せ */
@mixin center($direction) {
	position: absolute;
	@if $direction==xy {
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	}
	@else if $direction==x {
		left: 50%;
		transform: translateX(-50%);
	}
	@else if $direction==y {
		top: 50%;
		transform: translateY(-50%);
	}
}